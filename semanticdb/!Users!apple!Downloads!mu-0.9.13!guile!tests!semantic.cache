;; Object semanticdb-project-database-file
;; SEMANTICDB Tags save file
(semanticdb-project-database-file "semanticdb-project-database-file"
  :tables
  (list
    (semanticdb-table "semanticdb-table"
      :major-mode makefile-automake-mode
      :tags 
        '( ("$(top_srcdir)/gtest.mk" include nil nil [777 808])
            ("AM_CPPFLAGS" variable (:default-value ("$(XAPIAN_CXXFLAGS)" "$(GMIME_CFLAGS)" "$(GLIB_CFLAGS)" "-I" "${top_srcdir}" "-I" "${top_srcdir}/lib" "-I" "${top_srcdir}/lib/tests" "-DMU_TESTMAILDIR=\\\"${top_srcdir}/lib/tests/testdir\\\"" "-DMU_TESTMAILDIR2=\\\"${top_srcdir}/lib/tests/testdir2\\\"" "-DMU_TESTMAILDIR3=\\\"${top_srcdir}/lib/tests/testdir3\\\"" "-DMU_PROGRAM=\\\"${abs_top_builddir}/mu/mu\\\"" "-DMU_GUILE_MODULE_PATH=\\\"${abs_top_srcdir}/guile/\\\"" "-DMU_GUILE_LIBRARY_PATH=\\\"${abs_top_builddir}/guile/.libs\\\"" "-DABS_CURDIR=\\\"${abs_builddir}\\\"" "-DABS_SRCDIR=\\\"${abs_srcdir}\\\"")) nil [809 1390])
            ("AM_CFLAGS" variable (:default-value ("-Wall" "-Wextra" "-Wno-unused-parameter" "-Wdeclaration-after-statement")) nil [1548 1624])
            ("AM_CXXFLAGS" variable (:default-value ("-Wall" "-Wextra" "-Wno-unused-parameter")) nil [1624 1672])
            ("noinst_PROGRAMS" variable (:default-value ("$(TEST_PROGS)")) nil [1673 1704])
            ("TEST_PROGS" variable (:default-value ("test-mu-guile")) nil [1705 1733])
            ("test_mu_guile_SOURCES" variable (:default-value ("test-mu-guile.c" "dummy.cc")) nil [1733 1781])
            ("test_mu_guile_LDADD" variable (:default-value ("${top_builddir}/lib/tests/libtestmucommon.la")) nil [1781 1846])
            ("BUILT_SOURCES" variable (:default-value ("dummy.cc")) nil [1899 1930])
            ("dummy.cc" function nil nil [1930 1956])
            ("EXTRA_DIST" variable (:default-value ("test-mu-guile.scm")) nil [1957 1986]))          
      :file "Makefile.am"
      :pointmax 1986
      :fsize 1985
      :lastmodtime '(21469 63860 0 0)
      :unmatched-syntax nil))
  :file "!Users!apple!Downloads!mu-0.9.13!guile!tests!semantic.cache"
  :semantic-tag-version "2.0"
  :semanticdb-version "2.2")
